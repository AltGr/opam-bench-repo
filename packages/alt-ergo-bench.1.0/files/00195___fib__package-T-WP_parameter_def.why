(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic safe_comp_div: int, int -> int
axiom safe_comp_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_div(x,y) = x / y
logic safe_comp_mod: int, int -> int
axiom safe_comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_mod(x,y) = x % y
logic safe_eucl_div: int, int -> int
axiom safe_eucl_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_eucl_div(x,y) = x / y
logic safe_eucl_mod: int, int -> int
axiom safe_eucl_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_eucl_mod(x,y) = x % y
logic match_bool1 : bool, 'a, 'a -> 'a

axiom match_bool_True1 :
  (forall z:'a. forall z1:'a. (match_bool1(true, z, z1) = z))

axiom match_bool_False1 :
  (forall z:'a. forall z1:'a. (match_bool1(false, z, z1) = z1))

type unit1

type 'a ref1 = { contents1 : 'a
}

function andb1(x: bool, y: bool) : bool = match_bool1(x, y, false)

function orb1(x: bool, y: bool) : bool = match_bool1(x, true, y)

function xorb1(x: bool, y: bool) : bool = match_bool1(y, match_bool1(x,
  false, true), match_bool1(x, true, false))

function notb1(x: bool) : bool = match_bool1(x, false, true)

function implb1(x: bool, y: bool) : bool = match_bool1(y, true,
  match_bool1(x, false, true))

logic us__ignore1 : 'a -> unit

type us_private1

type us_type_of_heap1

type us_image1

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs : int -> int

axiom abs_def2 : (forall x:int. ((0 <= x) -> (abs(x) = x)))

axiom abs_def3 : (forall x:int. ((not (0 <= x)) -> (abs(x) = (-x))))

axiom Abs_le : (forall x:int. forall y:int. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 : (forall x:int. forall y:int. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:int. forall y:int. ((((-y) <= x) and (x <= y)) -> (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n4:int. ((0 <= n4) -> (power(x,
  (n4 + 1)) = (x * power(x, n4)))))

axiom Power_s_alt :
  (forall x:int. forall n4:int. ((0 <  n4) -> (power(x, n4) = (x * power(x,
  (n4 - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n4:int. forall m:int. ((0 <= n4) -> ((0 <= m) ->
  (power(x, (n4 + m)) = (power(x, n4) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n4:int. forall m:int. ((0 <= n4) -> ((0 <= m) ->
  (power(x, (n4 * m)) = power(power(x, n4), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n4:int. ((0 <= n4) -> (power((x * y),
  n4) = (power(x, n4) * power(y, n4)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge2 : (forall x:int. forall y:int. (x <= max(x, y)))

axiom Max_is_ge3 : (forall x:int. forall y:int. (y <= max(x, y)))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le2 : (forall x:int. forall y:int. (min(x, y) <= x))

axiom Min_is_le3 : (forall x:int. forall y:int. (min(x, y) <= y))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_comp_div(x,y)) + safe_comp_mod(x,y)))))

axiom Div_bound4 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_bound5 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_comp_div(x,y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs(y)) <  safe_comp_mod(x,y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_comp_mod(x,y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (safe_comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= safe_comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (safe_comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((safe_comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (safe_comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (safe_comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_div(((x * y) + z),x) = (y + safe_comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_mod(((x * y) + z),x) = safe_comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_eucl_div(x,y)) + safe_eucl_mod(x,y)))))

axiom Div_bound6 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_eucl_div(x,y))))

axiom Div_bound7 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_eucl_div(x,y) <= x)))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= safe_eucl_mod(x,y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_eucl_mod(x,y) <  abs(y))))

axiom Mod_11 : (forall x:int. (safe_eucl_mod(x,1) = 0))

axiom Div_11 : (forall x:int. (safe_eucl_div(x,1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_eucl_div(x,y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (safe_eucl_div((-x),y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> (safe_eucl_mod(0,y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> (safe_eucl_div(1,y) = 0)))

axiom Div_minus1_left :
  (forall y:int. ((1 <  y) -> (safe_eucl_div((-1),y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> (safe_eucl_mod(1,y) = 1)))

axiom Mod_minus1_left :
  (forall y:int. ((1 <  y) -> (safe_eucl_mod((-1),y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [safe_eucl_div(((x * y) + z),x)].
  ((0 <  x) -> (safe_eucl_div(((x * y) + z),x) = (y + safe_eucl_div(z,x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [safe_eucl_mod(((x * y) + z),x)].
  ((0 <  x) -> (safe_eucl_mod(((x * y) + z),x) = safe_eucl_mod(z,x))))

logic bool_eq4 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom6 :
  (forall x:int. (forall y:int. ((bool_eq4(x, y) = true) -> (x = y))))

axiom bool_eq_axiom7 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq4(x, y) = true))))

axiom bool_ne_axiom6 :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom7 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne1(x, y) = true))))

axiom bool_lt_axiom6 :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom7 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt1(x, y) = true))))

axiom Bool_int__le_axiom6 :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) -> (x <= y))))

axiom Bool_int__le_axiom7 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le1(x, y) = true))))

axiom bool_gt_axiom6 :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom7 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt1(x, y) = true))))

axiom bool_ge_axiom6 :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom7 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge1(x, y) = true))))

type natural1

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image1 -> int

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic to_int3 : natural1 -> int

logic of_int3 : int -> natural1

predicate eq3(x: natural1, y: natural1) = (to_int3(x) = to_int3(y))

axiom range_axiom : (forall x:natural1. in_range(to_int3(x)))

axiom inversion_axiom :
  (forall x:natural1 [to_int3(x)]. (of_int3(to_int3(x)) = x))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq5(x, y) = true)))

axiom bool_eq_def1 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq5(x, y) = false)))

logic dummy3 : natural1

axiom coerce_axiom :
  (forall x:int [to_int3(of_int3(x))| in_range(x), of_int3(x)].
  (in_range(x) -> (to_int3(of_int3(x)) = x)))

logic n12 : natural1

type t5b1

logic attr__ATTRIBUTE_LAST2 : int

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image1 -> int

predicate in_range4(x: int) = ((2 <= x) and (x <= attr__ATTRIBUTE_LAST2))

logic to_int10 : t5b1 -> int

logic of_int10 : int -> t5b1

predicate eq10(x: t5b1, y: t5b1) = (to_int10(x) = to_int10(y))

axiom range_axiom4 : (forall x:t5b1. in_range4(to_int10(x)))

axiom inversion_axiom4 :
  (forall x:t5b1 [to_int10(x)]. (of_int10(to_int10(x)) = x))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq12(x, y) = true)))

axiom bool_eq_def9 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq12(x, y) = false)))

logic dummy10 : t5b1

axiom coerce_axiom4 :
  (forall x:int [to_int10(of_int10(x))| in_range4(x), of_int10(x)].
  (in_range4(x) -> (to_int10(of_int10(x)) = x)))

type t17

logic n22 : natural1

type t6b1

logic attr__ATTRIBUTE_LAST3 : int

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image1 -> int

predicate in_range5(x: int) = ((2 <= x) and (x <= attr__ATTRIBUTE_LAST3))

logic to_int11 : t6b1 -> int

logic of_int11 : int -> t6b1

predicate eq11(x: t6b1, y: t6b1) = (to_int11(x) = to_int11(y))

axiom range_axiom5 : (forall x:t6b1. in_range5(to_int11(x)))

axiom inversion_axiom5 :
  (forall x:t6b1 [to_int11(x)]. (of_int11(to_int11(x)) = x))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq13(x, y) = true)))

axiom bool_eq_def11 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq13(x, y) = false)))

logic dummy11 : t6b1

axiom coerce_axiom5 :
  (forall x:int [to_int11(of_int11(x))| in_range5(x), of_int11(x)].
  (in_range5(x) -> (to_int11(of_int11(x)) = x)))

type t18

type t19

type integer1

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image1 -> int

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int5 : integer1 -> int

logic of_int5 : int -> integer1

predicate eq5(x: integer1, y: integer1) = (to_int5(x) = to_int5(y))

axiom range_axiom2 : (forall x:integer1. in_range2(to_int5(x)))

axiom inversion_axiom2 :
  (forall x:integer1 [to_int5(x)]. (of_int5(to_int5(x)) = x))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq7(x, y) = true)))

axiom bool_eq_def5 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq7(x, y) = false)))

logic dummy5 : integer1

axiom coerce_axiom2 :
  (forall x:int [to_int5(of_int5(x))| in_range2(x), of_int5(x)].
  (in_range2(x) -> (to_int5(of_int5(x)) = x)))

logic factorial1 : natural1 -> natural1

type t20

goal WP_parameter_def3 : (((to_int3(n12) = to_int3(n22)) and
  (to_int3(n12) <= 7)) ->
  (forall p1:natural1. ((p1 = of_int3(1)) -> (((2 <= to_int3(n12)) ->
  ((0 <= 2) and (to_int3(n12) <= 2147483647))) -> (((2 = 2) and
  (to_int3(n12) = attr__ATTRIBUTE_LAST2)) ->
  (forall i:int. ((i = 2) -> (((2 <= i) and (i <= to_int3(n12))) ->
  (forall i1:int. forall p11:natural1.
  ((to_int3(p11) = to_int3(factorial1(of_int3((i1 - 1))))) -> (((2 <= i1) and
  (i1 <= to_int3(n12))) -> in_range2((i1 * to_int3(p11))))))))))))))

