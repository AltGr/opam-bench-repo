(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic safe_comp_div: int, int -> int
axiom safe_comp_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_div(x,y) = x / y
logic safe_comp_mod: int, int -> int
axiom safe_comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_mod(x,y) = x % y
logic safe_eucl_div: int, int -> int
axiom safe_eucl_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_eucl_div(x,y) = x / y
logic safe_eucl_mod: int, int -> int
axiom safe_eucl_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_eucl_mod(x,y) = x % y
logic match_bool1 : bool, 'a1, 'a1 -> 'a1

axiom match_bool_True1 :
  (forall z:'a1. forall z1:'a1. (match_bool1(true, z, z1) = z))

axiom match_bool_False1 :
  (forall z:'a1. forall z1:'a1. (match_bool1(false, z, z1) = z1))

type unit1

type 'a1 ref1 = { contents1 : 'a1
}

function andb1(x: bool, y: bool) : bool = match_bool1(x, y, false)

function orb1(x: bool, y: bool) : bool = match_bool1(x, true, y)

function xorb1(x: bool, y: bool) : bool = match_bool1(y, match_bool1(x,
  false, true), match_bool1(x, true, false))

function notb1(x: bool) : bool = match_bool1(x, false, true)

function implb1(x: bool, y: bool) : bool = match_bool1(y, true,
  match_bool1(x, false, true))

logic us__ignore1 : 'a1 -> unit

type us_private1

type us_type_of_heap1

type us_image1

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs : int -> int

axiom abs_def : (forall x:int. ((0 <= x) -> (abs(x) = x)))

axiom abs_def1 : (forall x:int. ((not (0 <= x)) -> (abs(x) = (-x))))

axiom Abs_le : (forall x:int. forall y:int. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 : (forall x:int. forall y:int. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:int. forall y:int. ((((-y) <= x) and (x <= y)) -> (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge : (forall x:int. forall y:int. (x <= max(x, y)))

axiom Max_is_ge1 : (forall x:int. forall y:int. (y <= max(x, y)))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le : (forall x:int. forall y:int. (min(x, y) <= x))

axiom Min_is_le1 : (forall x:int. forall y:int. (min(x, y) <= y))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_comp_div(x,y)) + safe_comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_comp_div(x,y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs(y)) <  safe_comp_mod(x,y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_comp_mod(x,y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (safe_comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= safe_comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (safe_comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((safe_comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (safe_comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (safe_comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_div(((x * y) + z),x) = (y + safe_comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_mod(((x * y) + z),x) = safe_comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_eucl_div(x,y)) + safe_eucl_mod(x,y)))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_eucl_div(x,y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_eucl_div(x,y) <= x)))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= safe_eucl_mod(x,y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_eucl_mod(x,y) <  abs(y))))

axiom Mod_11 : (forall x:int. (safe_eucl_mod(x,1) = 0))

axiom Div_11 : (forall x:int. (safe_eucl_div(x,1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_eucl_div(x,y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (safe_eucl_div((-x),y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> (safe_eucl_mod(0,y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> (safe_eucl_div(1,y) = 0)))

axiom Div_minus1_left :
  (forall y:int. ((1 <  y) -> (safe_eucl_div((-1),y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> (safe_eucl_mod(1,y) = 1)))

axiom Mod_minus1_left :
  (forall y:int. ((1 <  y) -> (safe_eucl_mod((-1),y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [safe_eucl_div(((x * y) + z),x)].
  ((0 <  x) -> (safe_eucl_div(((x * y) + z),x) = (y + safe_eucl_div(z,x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [safe_eucl_mod(((x * y) + z),x)].
  ((0 <  x) -> (safe_eucl_mod(((x * y) + z),x) = safe_eucl_mod(z,x))))

logic bool_eq5 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom2 :
  (forall x:int. (forall y:int. ((bool_eq5(x, y) = true) -> (x = y))))

axiom bool_eq_axiom3 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq5(x, y) = true))))

axiom bool_ne_axiom2 :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom3 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne1(x, y) = true))))

axiom bool_lt_axiom2 :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom3 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt1(x, y) = true))))

axiom Bool_int__le_axiom2 :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) -> (x <= y))))

axiom Bool_int__le_axiom3 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le1(x, y) = true))))

axiom bool_gt_axiom2 :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom3 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt1(x, y) = true))))

axiom bool_ge_axiom2 :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom3 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge1(x, y) = true))))

type integer1

logic attr__ATTRIBUTE_MODULUS : int

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image1 -> int

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int3 : integer1 -> int

logic of_int3 : int -> integer1

predicate eq2(x: integer1, y: integer1) = (to_int3(x) = to_int3(y))

axiom range_axiom : (forall x:integer1. in_range(to_int3(x)))

axiom inversion_axiom :
  (forall x:integer1 [to_int3(x)]. (of_int3(to_int3(x)) = x))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq6(x, y) = true)))

axiom bool_eq_def1 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq6(x, y) = false)))

logic dummy3 : integer1

axiom coerce_axiom :
  (forall x:int [to_int3(of_int3(x))| in_range(x), of_int3(x)].
  (in_range(x) -> (to_int3(of_int3(x)) = x)))

logic a1 : integer1

logic b1 : integer1

type txD11

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image1 -> int

predicate in_range1(x: int) = ((1 <= x) and (x <= 20))

logic to_int4 : txD11 -> int

logic of_int4 : int -> txD11

predicate eq3(x: txD11, y: txD11) = (to_int4(x) = to_int4(y))

axiom range_axiom1 : (forall x:txD11. in_range1(to_int4(x)))

axiom inversion_axiom1 :
  (forall x:txD11 [to_int4(x)]. (of_int4(to_int4(x)) = x))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq7(x, y) = true)))

axiom bool_eq_def3 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq7(x, y) = false)))

logic dummy4 : txD11

axiom coerce_axiom1 :
  (forall x:int [to_int4(of_int4(x))| in_range1(x), of_int4(x)].
  (in_range1(x) -> (to_int4(of_int4(x)) = x)))

type 'a2 map1

type 'a2 t1 = { elts2 : 'a2 map1; offset2 : int; first1 : int; last1 : int
}

logic get1 : 'a2 map1, int -> 'a2

logic set1 : 'a2 map1, int, 'a2 -> 'a2 map1

axiom Select_eq :
  (forall m:'a2 map1.
  (forall i:int.
  (forall a3:'a2 [set1(m, i, a3)]. (get1(set1(m, i, a3), i) = a3))))

axiom Select_neq :
  (forall m:'a2 map1.
  (forall i:int. forall j:int.
  (forall a3:'a2 [get1(set1(m, i, a3), j)| set1(m, i, a3), get1(m, j)].
  ((not (i = j)) -> (get1(set1(m, i, a3), j) = get1(m, j))))))

logic attr__ATTRIBUTE_LENGTH1 : 'a2 t1 -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x:'a2 t1. (((x).first1 <= (x).last1) ->
  (attr__ATTRIBUTE_LENGTH1(x) = (((x).last1 - (x).first1) + 1))))

axiom attr__ATTRIBUTE_LENGTH_def1 :
  (forall x:'a2 t1. ((not ((x).first1 <= (x).last1)) ->
  (attr__ATTRIBUTE_LENGTH1(x) = 0)))

function access1(i: int, x: 'a2 t1) : 'a2 = get1((x).elts2,
  ((i + (x).offset2) - (x).first1))

function update1(i: int, x: 'a2 t1, v: 'a2) : 'a2 t1 = { elts2 =
  set1((x).elts2, ((i + (x).offset2) - (x).first1), v); offset2 =
  (x).offset2; first1 = (x).first1; last1 = (x).last1 }

logic bool_eq8 : 'a2 t1, 'a2 t1 -> bool

axiom T__ada_array___equal_def3 :
  (forall a2:'a3 t1.
  (forall b2:'a3 t1 [bool_eq8(a2, b2)].
  (((attr__ATTRIBUTE_LENGTH1(a2) = attr__ATTRIBUTE_LENGTH1(b2)) and
  (forall i:int [access1(i, a2)]. ((((a2).first1 <= i) and
  (i <= (a2).last1)) -> (access1(i,
  a2) = access1((((b2).first1 - (a2).first1) + i), b2))))) -> (bool_eq8(a2,
  b2) = true))))

axiom T__ada_array___equal_def4 :
  (forall a2:'a3 t1.
  (forall b2:'a3 t1 [bool_eq8(a2, b2)]. ((bool_eq8(a2, b2) = true) ->
  (attr__ATTRIBUTE_LENGTH1(a2) = attr__ATTRIBUTE_LENGTH1(b2)))))

axiom T__ada_array___equal_def5 :
  (forall a2:'a3 t1.
  (forall b2:'a3 t1 [bool_eq8(a2, b2)]. ((bool_eq8(a2, b2) = true) ->
  (forall i:int [access1(i, a2)]. ((((a2).first1 <= i) and
  (i <= (a2).last1)) -> (access1(i,
  a2) = access1((((b2).first1 - (a2).first1) + i), b2)))))))

type us_t1 = { elts3 : integer1 map1; offset3 : int
}

function to_array1(a2: us_t1) : integer1 t1 = { elts2 = (a2).elts3; offset2 =
  (a2).offset3; first1 = 1; last1 = 20 }

function of_array1(a2: integer1 t1) : us_t1 = { elts3 = (a2).elts2; offset3 =
  (a2).offset2 }

logic dummy5 : us_t1

type txT

type t2

function ite1(b2: bool, x: 'a2, y: 'a2) : 'a2 = match_bool1(b2, x, y)

logic to_int5 : bool -> int

axiom to_int_def : (forall b2:bool. ((b2 = true) -> (to_int5(b2) = 1)))

axiom to_int_def1 :
  (forall b2:bool. ((not (b2 = true)) -> (to_int5(b2) = 0)))

logic of_int5 : int -> bool

axiom of_int_def : (forall i:int. ((i = 0) -> (of_int5(i) = false)))

axiom of_int_def1 : (forall i:int. ((not (i = 0)) -> (of_int5(i) = true)))

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE5 : bool -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image1 -> bool

logic bool_eq9 : bool, bool -> bool

axiom bool_eq_def4 :
  (forall x:bool. forall y:bool. ((x = y) -> (bool_eq9(x, y) = true)))

axiom bool_eq_def5 :
  (forall x:bool. forall y:bool. ((not (x = y)) -> (bool_eq9(x, y) = false)))

goal WP_parameter_def :
  (forall x:integer1 map1. forall x1:int. (in_range1(to_int3(a1)) ->
  (forall x2:integer1 map1. forall x3:int. (((x2 = (update1(to_int3(a1), {
  elts2 = x; offset2 = x1; first1 = 1; last1 = 20 }, of_int3(1))).elts2) and
  (x3 = (update1(to_int3(a1), { elts2 = x; offset2 = x1; first1 = 1; last1 =
  20 }, of_int3(1))).offset2)) -> (in_range1(to_int3(b1)) ->
  (forall x4:integer1 map1. forall x5:int. (((x4 = (update1(to_int3(b1), {
  elts2 = x2; offset2 = x3; first1 = 1; last1 = 20 }, of_int3(2))).elts2) and
  (x5 = (update1(to_int3(b1), { elts2 = x2; offset2 = x3; first1 = 1; last1 =
  20 }, of_int3(2))).offset2)) -> ((not (to_int3(a1) = to_int3(b1))) ->
  (to_int3(get1(x4, ((to_int3(a1) + x5) - 1))) = 1)))))))))

