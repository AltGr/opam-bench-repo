(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic safe_comp_div: int, int -> int
axiom safe_comp_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_div(x,y) = x / y
logic safe_comp_mod: int, int -> int
axiom safe_comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_mod(x,y) = x % y
logic safe_eucl_div: int, int -> int
axiom safe_eucl_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_eucl_div(x,y) = x / y
logic safe_eucl_mod: int, int -> int
axiom safe_eucl_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_eucl_mod(x,y) = x % y
logic match_bool1 : bool, 'a, 'a -> 'a

axiom match_bool_True1 :
  (forall z:'a. forall z1:'a. (match_bool1(true, z, z1) = z))

axiom match_bool_False1 :
  (forall z:'a. forall z1:'a. (match_bool1(false, z, z1) = z1))

type unit1

type 'a ref1 = { contents1 : 'a
}

function andb1(x: bool, y: bool) : bool = match_bool1(x, y, false)

function orb1(x: bool, y: bool) : bool = match_bool1(x, true, y)

function xorb1(x: bool, y: bool) : bool = match_bool1(y, match_bool1(x,
  false, true), match_bool1(x, true, false))

function notb1(x: bool) : bool = match_bool1(x, false, true)

function implb1(x: bool, y: bool) : bool = match_bool1(y, true,
  match_bool1(x, false, true))

logic us__ignore1 : 'a -> unit

type us_private1

type us_type_of_heap1

type us_image1

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs2 : real -> real

axiom abs_def : (forall x:real. ((0.0 <= x) -> (abs2(x) = x)))

axiom abs_def1 : (forall x:real. ((not (0.0 <= x)) -> (abs2(x) = (-x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs2(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 : (forall x:real. forall y:real. ((abs2(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs2(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs2(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs2((x + y)) <= (abs2(x) + abs2(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs2((x * y)) = (abs2(x) * abs2(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs2((x - z)) <= (abs2((x - y)) + abs2((y - z)))))

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

logic from_int1 : int -> real

axiom Zero : (from_int1(0) = 0.0)

axiom One : (from_int1(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int1((x + y)) = (from_int1(x) + from_int1(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int1((x - y)) = (from_int1(x) - from_int1(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int1((x * y)) = (from_int1(x) * from_int1(y))))

axiom Neg : (forall x:int. (from_int1((-x)) = (-from_int1(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int1(x) <= from_int1(y))))

logic truncate1 : real -> int

axiom Truncate_int : (forall i:int. (truncate1(from_int1(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (from_int1(truncate1(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  from_int1((truncate1(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (from_int1((truncate1(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= from_int1(truncate1(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= from_int1(truncate1(x))))

axiom Real_of_truncate1 :
  (forall x:real. (from_int1(truncate1(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (truncate1(x) <= truncate1(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int1(i)) -> (truncate1(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int1(i) <= x) -> (i <= truncate1(x))))

logic floor1 : real -> int

logic ceil1 : real -> int

axiom Floor_int : (forall i:int. (floor1(from_int1(i)) = i))

axiom Ceil_int : (forall i:int. (ceil1(from_int1(i)) = i))

axiom Floor_down : (forall x:real. (from_int1(floor1(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  from_int1((floor1(x) + 1))))

axiom Ceil_up : (forall x:real. (from_int1((ceil1(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= from_int1(ceil1(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor1(x) <= floor1(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil1(x) <= ceil1(y))))

logic power2 : real, int -> real

axiom Power_0 : (forall x:real. (power2(x, 0) = 1.0))

axiom Power_s :
  (forall x:real. forall n:int. ((0 <= n) -> (power2(x,
  (n + 1)) = (x * power2(x, n)))))

axiom Power_s_alt :
  (forall x:real. forall n:int. ((0 <  n) -> (power2(x, n) = (x * power2(x,
  (n - 1))))))

axiom Power_1 : (forall x:real. (power2(x, 1) = x))

axiom Power_sum :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = (power2(x, n) * power2(x, m))))))

axiom Power_mult :
  (forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult2 :
  (forall x:real. forall y:real. forall n:int. ((0 <= n) -> (power2((x * y),
  n) = (power2(x, n) * power2(y, n)))))

axiom Pow_ge_one :
  (forall x:real. forall n:int. (((0 <= n) and (1.0 <= x)) ->
  (1.0 <= power2(x, n))))

logic round1 : real -> int

axiom Round_down :
  (forall x:real. (((x - from_int1(floor1(x))) <  0.5) ->
  (round1(x) = floor1(x))))

axiom Round_up :
  (forall x:real. (((from_int1(ceil1(x)) - x) <  0.5) ->
  (round1(x) = ceil1(x))))

axiom Round_neg_tie :
  (forall x:real. ((((x - from_int1(floor1(x))) = 0.5) and (x <  0.0)) ->
  (round1(x) = floor1(x))))

axiom Round_pos_tie :
  (forall x:real. ((((from_int1(ceil1(x)) - x) = 0.5) and (0.0 <  x)) ->
  (round1(x) = ceil1(x))))

axiom Round_int :
  (forall i:int [round1(from_int1(i))]. (round1(from_int1(i)) = i))

axiom Round_near_int :
  (forall i:int.
  (forall x:real. ((((-0.5) <  x) and (x <  0.5)) ->
  (round1((from_int1(i) + x)) = i))))

axiom Round_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (round1(x) <= round1(y))))

axiom Round_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int1(i)) -> (round1(x) <= i)))

axiom Round_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int1(i) <= x) -> (i <= round1(x))))

axiom Round_bound : (forall x:real. ((x - 0.5) <= from_int1(round1(x))))

axiom Round_bound1 : (forall x:real. (from_int1(round1(x)) <= (x + 0.5)))

logic bool_lt2 : real, real -> bool

logic bool_le2 : real, real -> bool

logic bool_gt2 : real, real -> bool

logic bool_ge2 : real, real -> bool

logic bool_eq12 : real, real -> bool

logic bool_neq1 : real, real -> bool

axiom Bool_real__lt_axiom2 :
  (forall x:real. (forall y:real. ((bool_lt2(x, y) = true) -> (x <  y))))

axiom Bool_real__lt_axiom3 :
  (forall x:real. (forall y:real. ((x <  y) -> (bool_lt2(x, y) = true))))

axiom Bool_real__le_axiom2 :
  (forall x:real. (forall y:real. ((bool_le2(x, y) = true) -> (x <= y))))

axiom Bool_real__le_axiom3 :
  (forall x:real. (forall y:real. ((x <= y) -> (bool_le2(x, y) = true))))

axiom Bool_real__gt_axiom2 :
  (forall x:real. (forall y:real. ((bool_gt2(x, y) = true) -> (y <  x))))

axiom Bool_real__gt_axiom3 :
  (forall x:real. (forall y:real. ((y <  x) -> (bool_gt2(x, y) = true))))

axiom Bool_real__ge_axiom2 :
  (forall x:real. (forall y:real. ((bool_ge2(x, y) = true) -> (y <= x))))

axiom Bool_real__ge_axiom3 :
  (forall x:real. (forall y:real. ((y <= x) -> (bool_ge2(x, y) = true))))

axiom Bool_real__eq_axiom2 :
  (forall x:real. (forall y:real. ((bool_eq12(x, y) = true) -> (x = y))))

axiom Bool_real__eq_axiom3 :
  (forall x:real. (forall y:real. ((x = y) -> (bool_eq12(x, y) = true))))

axiom Bool_real__neq_axiom2 :
  (forall x:real.
  (forall y:real. ((bool_neq1(x, y) = true) -> (not (x = y)))))

axiom Bool_real__neq_axiom3 :
  (forall x:real.
  (forall y:real. ((not (x = y)) -> (bool_neq1(x, y) = true))))

type float1

logic attr__ATTRIBUTE_MODULUS6 : real

predicate in_range7(x: real) =
  (((-340282346638528859811704183484516925440.0) <= x) and
  (x <= 340282346638528859811704183484516925440.0))

logic to_real1 : float1 -> real

logic of_real1 : real -> float1

predicate eq6(x: float1, y: float1) = (to_real1(x) = to_real1(y))

axiom range_axiom : (forall x:float1. in_range7(to_real1(x)))

axiom coerce_axiom :
  (forall x:real [to_real1(of_real1(x))| in_range7(x), of_real1(x)].
  (in_range7(x) -> (to_real1(of_real1(x)) = x)))

axiom inversion_axiom :
  (forall x:float1 [to_real1(x)]. (of_real1(to_real1(x)) = x))

logic bool_eq13 : real, real -> bool

axiom bool_eq_def :
  (forall x:real. forall y:real. ((x = y) -> (bool_eq13(x, y) = true)))

axiom bool_eq_def1 :
  (forall x:real. forall y:real. ((not (x = y)) -> (bool_eq13(x,
  y) = false)))

logic attr__ATTRIBUTE_IMAGE7 : real -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image1 -> real

logic dummy13 : float1

logic abs1 : int -> int

axiom abs_def2 : (forall x:int. ((0 <= x) -> (abs1(x) = x)))

axiom abs_def3 : (forall x:int. ((not (0 <= x)) -> (abs1(x) = (-x))))

axiom Abs_le3 : (forall x:int. forall y:int. ((abs1(x) <= y) -> ((-y) <= x)))

axiom Abs_le4 : (forall x:int. forall y:int. ((abs1(x) <= y) -> (x <= y)))

axiom Abs_le5 :
  (forall x:int. forall y:int. ((((-y) <= x) and (x <= y)) ->
  (abs1(x) <= y)))

axiom Abs_pos1 : (forall x:int. (0 <= abs1(x)))

logic power1 : int, int -> int

axiom Power_01 : (forall x:int. (power1(x, 0) = 1))

axiom Power_s1 :
  (forall x:int. forall n:int. ((0 <= n) -> (power1(x,
  (n + 1)) = (x * power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:int. forall n:int. ((0 <  n) -> (power1(x, n) = (x * power1(x,
  (n - 1))))))

axiom Power_11 : (forall x:int. (power1(x, 1) = x))

axiom Power_sum1 :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = (power1(x, n) * power1(x, m))))))

axiom Power_mult1 :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power1((x * y),
  n) = (power1(x, n) * power1(y, n)))))

logic min : int, int -> int

logic max : int, int -> int

axiom Max_is_ge : (forall x:int. forall y:int. (x <= max(x, y)))

axiom Max_is_ge1 : (forall x:int. forall y:int. (y <= max(x, y)))

axiom Max_is_some :
  (forall x:int. forall y:int. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le : (forall x:int. forall y:int. (min(x, y) <= x))

axiom Min_is_le1 : (forall x:int. forall y:int. (min(x, y) <= y))

axiom Min_is_some :
  (forall x:int. forall y:int. ((min(x, y) = x) or (min(x, y) = y)))

axiom Max_x : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Max_y : (forall x:int. forall y:int. ((x <= y) -> (max(x, y) = y)))

axiom Min_x : (forall x:int. forall y:int. ((x <= y) -> (min(x, y) = x)))

axiom Min_y : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_sym :
  (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = max(y, x))))

axiom Min_sym :
  (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = min(y, x))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_comp_div(x,y)) + safe_comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_comp_div(x,y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs1(y)) <  safe_comp_mod(x,y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_comp_mod(x,y) <  abs1(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (safe_comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= safe_comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (safe_comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs1((safe_comp_div(x,y) * y)) <= abs1(x))))

axiom Div_1 : (forall x:int. (safe_comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (safe_comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_div(((x * y) + z),x) = (y + safe_comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_mod(((x * y) + z),x) = safe_comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_eucl_div(x,y)) + safe_eucl_mod(x,y)))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_eucl_div(x,y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_eucl_div(x,y) <= x)))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= safe_eucl_mod(x,y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_eucl_mod(x,y) <  abs1(y))))

axiom Mod_11 : (forall x:int. (safe_eucl_mod(x,1) = 0))

axiom Div_11 : (forall x:int. (safe_eucl_div(x,1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_eucl_div(x,y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (safe_eucl_div((-x),y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> (safe_eucl_mod(0,y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> (safe_eucl_div(1,y) = 0)))

axiom Div_minus1_left :
  (forall y:int. ((1 <  y) -> (safe_eucl_div((-1),y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> (safe_eucl_mod(1,y) = 1)))

axiom Mod_minus1_left :
  (forall y:int. ((1 <  y) -> (safe_eucl_mod((-1),y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [safe_eucl_div(((x * y) + z),x)].
  ((0 <  x) -> (safe_eucl_div(((x * y) + z),x) = (y + safe_eucl_div(z,x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [safe_eucl_mod(((x * y) + z),x)].
  ((0 <  x) -> (safe_eucl_mod(((x * y) + z),x) = safe_eucl_mod(z,x))))

logic bool_eq14 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt3 : int, int -> bool

logic bool_le3 : int, int -> bool

logic bool_gt3 : int, int -> bool

logic bool_ge3 : int, int -> bool

axiom bool_eq_axiom2 :
  (forall x:int. (forall y:int. ((bool_eq14(x, y) = true) -> (x = y))))

axiom bool_eq_axiom3 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq14(x, y) = true))))

axiom bool_ne_axiom2 :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom3 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne1(x, y) = true))))

axiom bool_lt_axiom2 :
  (forall x:int. (forall y:int. ((bool_lt3(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom3 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt3(x, y) = true))))

axiom Bool_int__le_axiom2 :
  (forall x:int. (forall y:int. ((bool_le3(x, y) = true) -> (x <= y))))

axiom Bool_int__le_axiom3 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le3(x, y) = true))))

axiom bool_gt_axiom2 :
  (forall x:int. (forall y:int. ((bool_gt3(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom3 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt3(x, y) = true))))

axiom bool_ge_axiom2 :
  (forall x:int. (forall y:int. ((bool_ge3(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom3 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge3(x, y) = true))))

type function_range1

logic attr__ATTRIBUTE_MODULUS1 : int

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image1 -> int

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic to_int6 : function_range1 -> int

logic of_int6 : int -> function_range1

predicate eq7(x: function_range1, y: function_range1) =
  (to_int6(x) = to_int6(y))

axiom range_axiom1 : (forall x:function_range1. in_range1(to_int6(x)))

axiom inversion_axiom1 :
  (forall x:function_range1 [to_int6(x)]. (of_int6(to_int6(x)) = x))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq15(x, y) = true)))

axiom bool_eq_def3 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq15(x, y) = false)))

logic dummy14 : function_range1

axiom coerce_axiom1 :
  (forall x:int [to_int6(of_int6(x))| in_range1(x), of_int6(x)].
  (in_range1(x) -> (to_int6(of_int6(x)) = x)))

type delimiter_entry1 = { rec__delimiter1 : function_range1; rec__value1 :
float1
}

logic bool_eq16 : delimiter_entry1, delimiter_entry1 -> bool

axiom bool_eq_def4 :
  (forall a:delimiter_entry1. forall b:delimiter_entry1.
  ((((a).rec__delimiter1 = (b).rec__delimiter1) and
  ((a).rec__value1 = (b).rec__value1)) -> (bool_eq16(a, b) = true)))

axiom bool_eq_def5 :
  (forall a:delimiter_entry1. forall b:delimiter_entry1.
  ((not (((a).rec__delimiter1 = (b).rec__delimiter1) and
  ((a).rec__value1 = (b).rec__value1))) -> (bool_eq16(a, b) = false)))

logic dummy15 : delimiter_entry1

type 'a map1

type 'a t1 = { elts6 : 'a map1; offset6 : int; first1 : int; last1 : int
}

logic get1 : 'a map1, int -> 'a

logic set1 : 'a map1, int, 'a -> 'a map1

axiom Select_eq :
  (forall m:'a map1.
  (forall i:int.
  (forall a1:'a [set1(m, i, a1)]. (get1(set1(m, i, a1), i) = a1))))

axiom Select_neq :
  (forall m:'a map1.
  (forall i:int. forall j:int.
  (forall a1:'a [get1(set1(m, i, a1), j)| set1(m, i, a1), get1(m, j)].
  ((not (i = j)) -> (get1(set1(m, i, a1), j) = get1(m, j))))))

logic attr__ATTRIBUTE_LENGTH1 : 'a t1 -> int

axiom attr__ATTRIBUTE_LENGTH_def :
  (forall x:'a t1. (((x).first1 <= (x).last1) ->
  (attr__ATTRIBUTE_LENGTH1(x) = (((x).last1 - (x).first1) + 1))))

axiom attr__ATTRIBUTE_LENGTH_def1 :
  (forall x:'a t1. ((not ((x).first1 <= (x).last1)) ->
  (attr__ATTRIBUTE_LENGTH1(x) = 0)))

function access1(i: int, x: 'a t1) : 'a = get1((x).elts6,
  ((i + (x).offset6) - (x).first1))

function update1(i: int, x: 'a t1, v: 'a) : 'a t1 = { elts6 = set1((x).elts6,
  ((i + (x).offset6) - (x).first1), v); offset6 = (x).offset6; first1 =
  (x).first1; last1 = (x).last1 }

logic bool_eq17 : 'a t1, 'a t1 -> bool

axiom T__ada_array___equal_def3 :
  (forall a:'a1 t1.
  (forall b:'a1 t1 [bool_eq17(a, b)].
  (((attr__ATTRIBUTE_LENGTH1(a) = attr__ATTRIBUTE_LENGTH1(b)) and
  (forall i:int [access1(i, a)]. ((((a).first1 <= i) and (i <= (a).last1)) ->
  (access1(i, a) = access1((((b).first1 - (a).first1) + i), b))))) ->
  (bool_eq17(a, b) = true))))

axiom T__ada_array___equal_def4 :
  (forall a:'a1 t1.
  (forall b:'a1 t1 [bool_eq17(a, b)]. ((bool_eq17(a, b) = true) ->
  (attr__ATTRIBUTE_LENGTH1(a) = attr__ATTRIBUTE_LENGTH1(b)))))

axiom T__ada_array___equal_def5 :
  (forall a:'a1 t1.
  (forall b:'a1 t1 [bool_eq17(a, b)]. ((bool_eq17(a, b) = true) ->
  (forall i:int [access1(i, a)]. ((((a).first1 <= i) and (i <= (a).last1)) ->
  (access1(i, a) = access1((((b).first1 - (a).first1) + i), b)))))))

type us_t5 = { elts7 : delimiter_entry1 map1; offset7 : int
}

function to_array5(a: us_t5) : delimiter_entry1 t1 = { elts6 = (a).elts7;
  offset6 = (a).offset7; first1 = 0; last1 = 10 }

function of_array5(a: delimiter_entry1 t1) : us_t5 = { elts7 = (a).elts6;
  offset7 = (a).offset6 }

logic dummy16 : us_t5

type t2b

type t9b1

logic attr__ATTRIBUTE_MODULUS2 : int

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image1 -> int

predicate in_range2(x: int) = ((0 <= x) and (x <= 12))

logic to_int7 : t9b1 -> int

logic of_int7 : int -> t9b1

predicate eq8(x: t9b1, y: t9b1) = (to_int7(x) = to_int7(y))

axiom range_axiom2 : (forall x:t9b1. in_range2(to_int7(x)))

axiom inversion_axiom2 :
  (forall x:t9b1 [to_int7(x)]. (of_int7(to_int7(x)) = x))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq18(x, y) = true)))

axiom bool_eq_def7 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq18(x, y) = false)))

logic dummy17 : t9b1

axiom coerce_axiom2 :
  (forall x:int [to_int7(of_int7(x))| in_range2(x), of_int7(x)].
  (in_range2(x) -> (to_int7(of_int7(x)) = x)))

type t2

type us_t6 = { elts8 : delimiter_entry1 map1; offset8 : int
}

function to_array6(a: us_t6) : delimiter_entry1 t1 = { elts6 = (a).elts8;
  offset6 = (a).offset8; first1 = 0; last1 = 10 }

function of_array6(a: delimiter_entry1 t1) : us_t6 = { elts8 = (a).elts6;
  offset8 = (a).offset6 }

logic dummy18 : us_t6

type delimiter_values

type num_delimiters_range1

logic attr__ATTRIBUTE_MODULUS3 : int

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image1 -> int

predicate in_range3(x: int) = ((0 <= x) and (x <= 10))

logic to_int8 : num_delimiters_range1 -> int

logic of_int8 : int -> num_delimiters_range1

predicate eq9(x: num_delimiters_range1, y: num_delimiters_range1) =
  (to_int8(x) = to_int8(y))

axiom range_axiom3 : (forall x:num_delimiters_range1. in_range3(to_int8(x)))

axiom inversion_axiom3 :
  (forall x:num_delimiters_range1 [to_int8(x)]. (of_int8(to_int8(x)) = x))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq19(x, y) = true)))

axiom bool_eq_def9 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq19(x, y) = false)))

logic dummy19 : num_delimiters_range1

axiom coerce_axiom3 :
  (forall x:int [to_int8(of_int8(x))| in_range3(x), of_int8(x)].
  (in_range3(x) -> (to_int8(of_int8(x)) = x)))

type step_function_t1 = { rec__number_of_delimiters1 : num_delimiters_range1;
rec__step1 : us_t6
}

logic bool_eq20 : step_function_t1, step_function_t1 -> bool

axiom bool_eq_def10 :
  (forall a:step_function_t1. forall b:step_function_t1.
  ((((a).rec__number_of_delimiters1 = (b).rec__number_of_delimiters1) and
  ((a).rec__step1 = (b).rec__step1)) -> (bool_eq20(a, b) = true)))

axiom bool_eq_def11 :
  (forall a:step_function_t1. forall b:step_function_t1.
  ((not (((a).rec__number_of_delimiters1 = (b).rec__number_of_delimiters1) and
  ((a).rec__step1 = (b).rec__step1))) -> (bool_eq20(a, b) = false)))

logic dummy20 : step_function_t1

logic is_valid1 : step_function_t1 -> bool

type tnum_delimiters_rangeB1

logic attr__ATTRIBUTE_MODULUS4 : int

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image1 -> int

predicate in_range4(x: int) = (((-128) <= x) and (x <= 127))

logic to_int9 : tnum_delimiters_rangeB1 -> int

logic of_int9 : int -> tnum_delimiters_rangeB1

predicate eq10(x: tnum_delimiters_rangeB1, y: tnum_delimiters_rangeB1) =
  (to_int9(x) = to_int9(y))

axiom range_axiom4 :
  (forall x:tnum_delimiters_rangeB1. in_range4(to_int9(x)))

axiom inversion_axiom4 :
  (forall x:tnum_delimiters_rangeB1 [to_int9(x)]. (of_int9(to_int9(x)) = x))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq21(x, y) = true)))

axiom bool_eq_def13 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq21(x, y) = false)))

logic dummy21 : tnum_delimiters_rangeB1

axiom coerce_axiom4 :
  (forall x:int [to_int9(of_int9(x))| in_range4(x), of_int9(x)].
  (in_range4(x) -> (to_int9(of_int9(x)) = x)))

type tfunction_rangeB1

logic attr__ATTRIBUTE_MODULUS5 : int

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image1 -> int

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic to_int10 : tfunction_rangeB1 -> int

logic of_int10 : int -> tfunction_rangeB1

predicate eq11(x: tfunction_rangeB1, y: tfunction_rangeB1) =
  (to_int10(x) = to_int10(y))

axiom range_axiom5 : (forall x:tfunction_rangeB1. in_range5(to_int10(x)))

axiom inversion_axiom5 :
  (forall x:tfunction_rangeB1 [to_int10(x)]. (of_int10(to_int10(x)) = x))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int. ((x = y) -> (bool_eq22(x, y) = true)))

axiom bool_eq_def15 :
  (forall x:int. forall y:int. ((not (x = y)) -> (bool_eq22(x, y) = false)))

logic dummy22 : tfunction_rangeB1

axiom coerce_axiom5 :
  (forall x:int [to_int10(of_int10(x))| in_range5(x), of_int10(x)].
  (in_range5(x) -> (to_int10(of_int10(x)) = x)))

axiom def_axiom28 :
  (forall step_function__is_valid__sfun:step_function_t1
  [is_valid1(step_function__is_valid__sfun)].
  ((is_valid1(step_function__is_valid__sfun) = true) -> (to_int6((access1(0,
  to_array6((step_function__is_valid__sfun).rec__step1))).rec__delimiter1) = 0)))

axiom def_axiom29 :
  (forall step_function__is_valid__sfun:step_function_t1
  [is_valid1(step_function__is_valid__sfun)].
  ((is_valid1(step_function__is_valid__sfun) = true) ->
  (forall step_function__is_valid__L16s__i:int.
  (((0 <= step_function__is_valid__L16s__i) and
  (step_function__is_valid__L16s__i <= (to_int8((step_function__is_valid__sfun).rec__number_of_delimiters1) - 1))) ->
  (to_int6((access1(step_function__is_valid__L16s__i,
  to_array6((step_function__is_valid__sfun).rec__step1))).rec__delimiter1) <  to_int6((access1((step_function__is_valid__L16s__i + 1),
  to_array6((step_function__is_valid__sfun).rec__step1))).rec__delimiter1))))))

axiom def_axiom30 :
  (forall step_function__is_valid__sfun:step_function_t1
  [is_valid1(step_function__is_valid__sfun)]. (((to_int6((access1(0,
  to_array6((step_function__is_valid__sfun).rec__step1))).rec__delimiter1) = 0) and
  (forall step_function__is_valid__L16s__i:int.
  (((0 <= step_function__is_valid__L16s__i) and
  (step_function__is_valid__L16s__i <= (to_int8((step_function__is_valid__sfun).rec__number_of_delimiters1) - 1))) ->
  (to_int6((access1(step_function__is_valid__L16s__i,
  to_array6((step_function__is_valid__sfun).rec__step1))).rec__delimiter1) <  to_int6((access1((step_function__is_valid__L16s__i + 1),
  to_array6((step_function__is_valid__sfun).rec__step1))).rec__delimiter1))))) ->
  (is_valid1(step_function__is_valid__sfun) = true)))

logic has_same_delimiters1 : step_function_t1, step_function_t1 -> bool

axiom def_axiom31 :
  (forall step_function__has_same_delimiters__sfun1:step_function_t1.
  forall step_function__has_same_delimiters__sfun2:step_function_t1
  [has_same_delimiters1(step_function__has_same_delimiters__sfun1,
  step_function__has_same_delimiters__sfun2)].
  ((has_same_delimiters1(step_function__has_same_delimiters__sfun1,
  step_function__has_same_delimiters__sfun2) = true) ->
  (to_int8((step_function__has_same_delimiters__sfun1).rec__number_of_delimiters1) = to_int8((step_function__has_same_delimiters__sfun2).rec__number_of_delimiters1))))

axiom def_axiom32 :
  (forall step_function__has_same_delimiters__sfun1:step_function_t1.
  forall step_function__has_same_delimiters__sfun2:step_function_t1
  [has_same_delimiters1(step_function__has_same_delimiters__sfun1,
  step_function__has_same_delimiters__sfun2)].
  ((has_same_delimiters1(step_function__has_same_delimiters__sfun1,
  step_function__has_same_delimiters__sfun2) = true) ->
  (forall step_function__has_same_delimiters__L19s__i:int.
  (((1 <= step_function__has_same_delimiters__L19s__i) and
  (step_function__has_same_delimiters__L19s__i <= to_int8((step_function__has_same_delimiters__sfun1).rec__number_of_delimiters1))) ->
  (to_int6((access1(step_function__has_same_delimiters__L19s__i,
  to_array6((step_function__has_same_delimiters__sfun1).rec__step1))).rec__delimiter1) = to_int6((access1(step_function__has_same_delimiters__L19s__i,
  to_array6((step_function__has_same_delimiters__sfun2).rec__step1))).rec__delimiter1))))))

axiom def_axiom33 :
  (forall step_function__has_same_delimiters__sfun1:step_function_t1.
  forall step_function__has_same_delimiters__sfun2:step_function_t1
  [has_same_delimiters1(step_function__has_same_delimiters__sfun1,
  step_function__has_same_delimiters__sfun2)].
  (((to_int8((step_function__has_same_delimiters__sfun1).rec__number_of_delimiters1) = to_int8((step_function__has_same_delimiters__sfun2).rec__number_of_delimiters1)) and
  (forall step_function__has_same_delimiters__L19s__i:int.
  (((1 <= step_function__has_same_delimiters__L19s__i) and
  (step_function__has_same_delimiters__L19s__i <= to_int8((step_function__has_same_delimiters__sfun1).rec__number_of_delimiters1))) ->
  (to_int6((access1(step_function__has_same_delimiters__L19s__i,
  to_array6((step_function__has_same_delimiters__sfun1).rec__step1))).rec__delimiter1) = to_int6((access1(step_function__has_same_delimiters__L19s__i,
  to_array6((step_function__has_same_delimiters__sfun2).rec__step1))).rec__delimiter1))))) ->
  (has_same_delimiters1(step_function__has_same_delimiters__sfun1,
  step_function__has_same_delimiters__sfun2) = true)))

logic step_function_test__7__151 : delimiter_entry1, delimiter_entry1,
  delimiter_entry1, delimiter_entry1 -> us_t5

axiom def_axiom34 :
  (forall ustemp_step_function_test_27:delimiter_entry1.
  forall ustemp_step_function_test_28:delimiter_entry1.
  forall ustemp_step_function_test_29:delimiter_entry1.
  forall ustemp_step_function_test_30:delimiter_entry1
  [step_function_test__7__151(ustemp_step_function_test_27,
  ustemp_step_function_test_28, ustemp_step_function_test_29,
  ustemp_step_function_test_30)].
  (forall ustemp_step_function_test_31:int.
  ((ustemp_step_function_test_31 = 0) ->
  (access1(ustemp_step_function_test_31,
  to_array5(step_function_test__7__151(ustemp_step_function_test_27,
  ustemp_step_function_test_28, ustemp_step_function_test_29,
  ustemp_step_function_test_30))) = ustemp_step_function_test_27))))

axiom def_axiom35 :
  (forall ustemp_step_function_test_27:delimiter_entry1.
  forall ustemp_step_function_test_28:delimiter_entry1.
  forall ustemp_step_function_test_29:delimiter_entry1.
  forall ustemp_step_function_test_30:delimiter_entry1
  [step_function_test__7__151(ustemp_step_function_test_27,
  ustemp_step_function_test_28, ustemp_step_function_test_29,
  ustemp_step_function_test_30)].
  (forall ustemp_step_function_test_31:int.
  ((not (ustemp_step_function_test_31 = 0)) ->
  ((ustemp_step_function_test_31 = 1) ->
  (access1(ustemp_step_function_test_31,
  to_array5(step_function_test__7__151(ustemp_step_function_test_27,
  ustemp_step_function_test_28, ustemp_step_function_test_29,
  ustemp_step_function_test_30))) = ustemp_step_function_test_28)))))

axiom def_axiom36 :
  (forall ustemp_step_function_test_27:delimiter_entry1.
  forall ustemp_step_function_test_28:delimiter_entry1.
  forall ustemp_step_function_test_29:delimiter_entry1.
  forall ustemp_step_function_test_30:delimiter_entry1
  [step_function_test__7__151(ustemp_step_function_test_27,
  ustemp_step_function_test_28, ustemp_step_function_test_29,
  ustemp_step_function_test_30)].
  (forall ustemp_step_function_test_31:int.
  ((not (ustemp_step_function_test_31 = 0)) ->
  ((not (ustemp_step_function_test_31 = 1)) ->
  ((ustemp_step_function_test_31 = 2) ->
  (access1(ustemp_step_function_test_31,
  to_array5(step_function_test__7__151(ustemp_step_function_test_27,
  ustemp_step_function_test_28, ustemp_step_function_test_29,
  ustemp_step_function_test_30))) = ustemp_step_function_test_29))))))

axiom def_axiom37 :
  (forall ustemp_step_function_test_27:delimiter_entry1.
  forall ustemp_step_function_test_28:delimiter_entry1.
  forall ustemp_step_function_test_29:delimiter_entry1.
  forall ustemp_step_function_test_30:delimiter_entry1
  [step_function_test__7__151(ustemp_step_function_test_27,
  ustemp_step_function_test_28, ustemp_step_function_test_29,
  ustemp_step_function_test_30)].
  (forall ustemp_step_function_test_31:int.
  ((not (ustemp_step_function_test_31 = 0)) ->
  ((not (ustemp_step_function_test_31 = 1)) ->
  ((not (ustemp_step_function_test_31 = 2)) ->
  (access1(ustemp_step_function_test_31,
  to_array5(step_function_test__7__151(ustemp_step_function_test_27,
  ustemp_step_function_test_28, ustemp_step_function_test_29,
  ustemp_step_function_test_30))) = ustemp_step_function_test_30))))))

logic min2 : float1, float1 -> float1

type t3

logic get_value1 : step_function_t1, function_range1 -> float1

function ite1(b: bool, x: 'a, y: 'a) : 'a = match_bool1(b, x, y)

logic to_int11 : bool -> int

axiom to_int_def : (forall b:bool. ((b = true) -> (to_int11(b) = 1)))

axiom to_int_def1 : (forall b:bool. ((not (b = true)) -> (to_int11(b) = 0)))

logic of_int11 : int -> bool

axiom of_int_def : (forall i:int. ((i = 0) -> (of_int11(i) = false)))

axiom of_int_def1 : (forall i:int. ((not (i = 0)) -> (of_int11(i) = true)))

predicate in_range6(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE13 : bool -> us_image1

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image1 -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image1 -> bool

logic bool_eq23 : bool, bool -> bool

axiom bool_eq_def16 :
  (forall x:bool. forall y:bool. ((x = y) -> (bool_eq23(x, y) = true)))

axiom bool_eq_def17 :
  (forall x:bool. forall y:bool. ((not (x = y)) -> (bool_eq23(x,
  y) = false)))

logic minimum_until_point1 : step_function_t1, function_range1 -> float1

type us_t7 = { elts9 : delimiter_entry1 map1; offset9 : int
}

function to_array7(a: us_t7) : delimiter_entry1 t1 = { elts6 = (a).elts9;
  offset6 = (a).offset9; first1 = 0; last1 = 10 }

function of_array7(a: delimiter_entry1 t1) : us_t7 = { elts9 = (a).elts6;
  offset9 = (a).offset6 }

logic dummy23 : us_t7

type t4b

type us_t8 = { elts10 : delimiter_entry1 map1; offset10 : int
}

function to_array8(a: us_t8) : delimiter_entry1 t1 = { elts6 = (a).elts10;
  offset6 = (a).offset10; first1 = 0; last1 = 10 }

function of_array8(a: delimiter_entry1 t1) : us_t8 = { elts10 = (a).elts6;
  offset10 = (a).offset6 }

logic dummy24 : us_t8

type t6b

type us_t9 = { elts11 : delimiter_entry1 map1; offset11 : int
}

function to_array9(a: us_t9) : delimiter_entry1 t1 = { elts6 = (a).elts11;
  offset6 = (a).offset11; first1 = 0; last1 = 10 }

function of_array9(a: delimiter_entry1 t1) : us_t9 = { elts11 = (a).elts6;
  offset11 = (a).offset6 }

logic dummy25 : us_t9

type t8b

type t4

type t5

type t6

logic step_function_test__14__151 : delimiter_entry1, delimiter_entry1,
  delimiter_entry1, delimiter_entry1 -> us_t7

axiom def_axiom38 :
  (forall ustemp_step_function_test_21:delimiter_entry1.
  forall ustemp_step_function_test_22:delimiter_entry1.
  forall ustemp_step_function_test_23:delimiter_entry1.
  forall ustemp_step_function_test_24:delimiter_entry1
  [step_function_test__14__151(ustemp_step_function_test_21,
  ustemp_step_function_test_22, ustemp_step_function_test_23,
  ustemp_step_function_test_24)].
  (forall ustemp_step_function_test_25:int.
  ((ustemp_step_function_test_25 = 0) ->
  (access1(ustemp_step_function_test_25,
  to_array7(step_function_test__14__151(ustemp_step_function_test_21,
  ustemp_step_function_test_22, ustemp_step_function_test_23,
  ustemp_step_function_test_24))) = ustemp_step_function_test_21))))

axiom def_axiom39 :
  (forall ustemp_step_function_test_21:delimiter_entry1.
  forall ustemp_step_function_test_22:delimiter_entry1.
  forall ustemp_step_function_test_23:delimiter_entry1.
  forall ustemp_step_function_test_24:delimiter_entry1
  [step_function_test__14__151(ustemp_step_function_test_21,
  ustemp_step_function_test_22, ustemp_step_function_test_23,
  ustemp_step_function_test_24)].
  (forall ustemp_step_function_test_25:int.
  ((not (ustemp_step_function_test_25 = 0)) ->
  ((ustemp_step_function_test_25 = 1) ->
  (access1(ustemp_step_function_test_25,
  to_array7(step_function_test__14__151(ustemp_step_function_test_21,
  ustemp_step_function_test_22, ustemp_step_function_test_23,
  ustemp_step_function_test_24))) = ustemp_step_function_test_22)))))

axiom def_axiom40 :
  (forall ustemp_step_function_test_21:delimiter_entry1.
  forall ustemp_step_function_test_22:delimiter_entry1.
  forall ustemp_step_function_test_23:delimiter_entry1.
  forall ustemp_step_function_test_24:delimiter_entry1
  [step_function_test__14__151(ustemp_step_function_test_21,
  ustemp_step_function_test_22, ustemp_step_function_test_23,
  ustemp_step_function_test_24)].
  (forall ustemp_step_function_test_25:int.
  ((not (ustemp_step_function_test_25 = 0)) ->
  ((not (ustemp_step_function_test_25 = 1)) ->
  ((ustemp_step_function_test_25 = 2) ->
  (access1(ustemp_step_function_test_25,
  to_array7(step_function_test__14__151(ustemp_step_function_test_21,
  ustemp_step_function_test_22, ustemp_step_function_test_23,
  ustemp_step_function_test_24))) = ustemp_step_function_test_23))))))

axiom def_axiom41 :
  (forall ustemp_step_function_test_21:delimiter_entry1.
  forall ustemp_step_function_test_22:delimiter_entry1.
  forall ustemp_step_function_test_23:delimiter_entry1.
  forall ustemp_step_function_test_24:delimiter_entry1
  [step_function_test__14__151(ustemp_step_function_test_21,
  ustemp_step_function_test_22, ustemp_step_function_test_23,
  ustemp_step_function_test_24)].
  (forall ustemp_step_function_test_25:int.
  ((not (ustemp_step_function_test_25 = 0)) ->
  ((not (ustemp_step_function_test_25 = 1)) ->
  ((not (ustemp_step_function_test_25 = 2)) ->
  (access1(ustemp_step_function_test_25,
  to_array7(step_function_test__14__151(ustemp_step_function_test_21,
  ustemp_step_function_test_22, ustemp_step_function_test_23,
  ustemp_step_function_test_24))) = ustemp_step_function_test_24))))))

logic step_function_test__21__151 : delimiter_entry1, delimiter_entry1,
  delimiter_entry1, delimiter_entry1, delimiter_entry1, delimiter_entry1,
  delimiter_entry1 -> us_t8

axiom def_axiom42 :
  (forall ustemp_step_function_test_12:delimiter_entry1.
  forall ustemp_step_function_test_13:delimiter_entry1.
  forall ustemp_step_function_test_14:delimiter_entry1.
  forall ustemp_step_function_test_15:delimiter_entry1.
  forall ustemp_step_function_test_16:delimiter_entry1.
  forall ustemp_step_function_test_17:delimiter_entry1.
  forall ustemp_step_function_test_18:delimiter_entry1
  [step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17, ustemp_step_function_test_18)].
  (forall ustemp_step_function_test_19:int.
  ((ustemp_step_function_test_19 = 0) ->
  (access1(ustemp_step_function_test_19,
  to_array8(step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17,
  ustemp_step_function_test_18))) = ustemp_step_function_test_12))))

axiom def_axiom43 :
  (forall ustemp_step_function_test_12:delimiter_entry1.
  forall ustemp_step_function_test_13:delimiter_entry1.
  forall ustemp_step_function_test_14:delimiter_entry1.
  forall ustemp_step_function_test_15:delimiter_entry1.
  forall ustemp_step_function_test_16:delimiter_entry1.
  forall ustemp_step_function_test_17:delimiter_entry1.
  forall ustemp_step_function_test_18:delimiter_entry1
  [step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17, ustemp_step_function_test_18)].
  (forall ustemp_step_function_test_19:int.
  ((not (ustemp_step_function_test_19 = 0)) ->
  ((ustemp_step_function_test_19 = 1) ->
  (access1(ustemp_step_function_test_19,
  to_array8(step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17,
  ustemp_step_function_test_18))) = ustemp_step_function_test_13)))))

axiom def_axiom44 :
  (forall ustemp_step_function_test_12:delimiter_entry1.
  forall ustemp_step_function_test_13:delimiter_entry1.
  forall ustemp_step_function_test_14:delimiter_entry1.
  forall ustemp_step_function_test_15:delimiter_entry1.
  forall ustemp_step_function_test_16:delimiter_entry1.
  forall ustemp_step_function_test_17:delimiter_entry1.
  forall ustemp_step_function_test_18:delimiter_entry1
  [step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17, ustemp_step_function_test_18)].
  (forall ustemp_step_function_test_19:int.
  ((not (ustemp_step_function_test_19 = 0)) ->
  ((not (ustemp_step_function_test_19 = 1)) ->
  ((ustemp_step_function_test_19 = 2) ->
  (access1(ustemp_step_function_test_19,
  to_array8(step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17,
  ustemp_step_function_test_18))) = ustemp_step_function_test_14))))))

axiom def_axiom45 :
  (forall ustemp_step_function_test_12:delimiter_entry1.
  forall ustemp_step_function_test_13:delimiter_entry1.
  forall ustemp_step_function_test_14:delimiter_entry1.
  forall ustemp_step_function_test_15:delimiter_entry1.
  forall ustemp_step_function_test_16:delimiter_entry1.
  forall ustemp_step_function_test_17:delimiter_entry1.
  forall ustemp_step_function_test_18:delimiter_entry1
  [step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17, ustemp_step_function_test_18)].
  (forall ustemp_step_function_test_19:int.
  ((not (ustemp_step_function_test_19 = 0)) ->
  ((not (ustemp_step_function_test_19 = 1)) ->
  ((not (ustemp_step_function_test_19 = 2)) ->
  ((ustemp_step_function_test_19 = 3) ->
  (access1(ustemp_step_function_test_19,
  to_array8(step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17,
  ustemp_step_function_test_18))) = ustemp_step_function_test_15)))))))

axiom def_axiom46 :
  (forall ustemp_step_function_test_12:delimiter_entry1.
  forall ustemp_step_function_test_13:delimiter_entry1.
  forall ustemp_step_function_test_14:delimiter_entry1.
  forall ustemp_step_function_test_15:delimiter_entry1.
  forall ustemp_step_function_test_16:delimiter_entry1.
  forall ustemp_step_function_test_17:delimiter_entry1.
  forall ustemp_step_function_test_18:delimiter_entry1
  [step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17, ustemp_step_function_test_18)].
  (forall ustemp_step_function_test_19:int.
  ((not (ustemp_step_function_test_19 = 0)) ->
  ((not (ustemp_step_function_test_19 = 1)) ->
  ((not (ustemp_step_function_test_19 = 2)) ->
  ((not (ustemp_step_function_test_19 = 3)) ->
  ((ustemp_step_function_test_19 = 4) ->
  (access1(ustemp_step_function_test_19,
  to_array8(step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17,
  ustemp_step_function_test_18))) = ustemp_step_function_test_16))))))))

axiom def_axiom47 :
  (forall ustemp_step_function_test_12:delimiter_entry1.
  forall ustemp_step_function_test_13:delimiter_entry1.
  forall ustemp_step_function_test_14:delimiter_entry1.
  forall ustemp_step_function_test_15:delimiter_entry1.
  forall ustemp_step_function_test_16:delimiter_entry1.
  forall ustemp_step_function_test_17:delimiter_entry1.
  forall ustemp_step_function_test_18:delimiter_entry1
  [step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17, ustemp_step_function_test_18)].
  (forall ustemp_step_function_test_19:int.
  ((not (ustemp_step_function_test_19 = 0)) ->
  ((not (ustemp_step_function_test_19 = 1)) ->
  ((not (ustemp_step_function_test_19 = 2)) ->
  ((not (ustemp_step_function_test_19 = 3)) ->
  ((not (ustemp_step_function_test_19 = 4)) ->
  ((ustemp_step_function_test_19 = 5) ->
  (access1(ustemp_step_function_test_19,
  to_array8(step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17,
  ustemp_step_function_test_18))) = ustemp_step_function_test_17)))))))))

axiom def_axiom48 :
  (forall ustemp_step_function_test_12:delimiter_entry1.
  forall ustemp_step_function_test_13:delimiter_entry1.
  forall ustemp_step_function_test_14:delimiter_entry1.
  forall ustemp_step_function_test_15:delimiter_entry1.
  forall ustemp_step_function_test_16:delimiter_entry1.
  forall ustemp_step_function_test_17:delimiter_entry1.
  forall ustemp_step_function_test_18:delimiter_entry1
  [step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17, ustemp_step_function_test_18)].
  (forall ustemp_step_function_test_19:int.
  ((not (ustemp_step_function_test_19 = 0)) ->
  ((not (ustemp_step_function_test_19 = 1)) ->
  ((not (ustemp_step_function_test_19 = 2)) ->
  ((not (ustemp_step_function_test_19 = 3)) ->
  ((not (ustemp_step_function_test_19 = 4)) ->
  ((not (ustemp_step_function_test_19 = 5)) ->
  (access1(ustemp_step_function_test_19,
  to_array8(step_function_test__21__151(ustemp_step_function_test_12,
  ustemp_step_function_test_13, ustemp_step_function_test_14,
  ustemp_step_function_test_15, ustemp_step_function_test_16,
  ustemp_step_function_test_17,
  ustemp_step_function_test_18))) = ustemp_step_function_test_18)))))))))

logic step_function_test__31__151 : delimiter_entry1, delimiter_entry1,
  delimiter_entry1, delimiter_entry1, delimiter_entry1, delimiter_entry1,
  delimiter_entry1 -> us_t9

axiom def_axiom49 :
  (forall ustemp_step_function_test_3:delimiter_entry1.
  forall ustemp_step_function_test_4:delimiter_entry1.
  forall ustemp_step_function_test_5:delimiter_entry1.
  forall ustemp_step_function_test_6:delimiter_entry1.
  forall ustemp_step_function_test_7:delimiter_entry1.
  forall ustemp_step_function_test_8:delimiter_entry1.
  forall ustemp_step_function_test_9:delimiter_entry1
  [step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8, ustemp_step_function_test_9)].
  (forall ustemp_step_function_test_10:int.
  ((ustemp_step_function_test_10 = 0) ->
  (access1(ustemp_step_function_test_10,
  to_array9(step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8,
  ustemp_step_function_test_9))) = ustemp_step_function_test_3))))

axiom def_axiom50 :
  (forall ustemp_step_function_test_3:delimiter_entry1.
  forall ustemp_step_function_test_4:delimiter_entry1.
  forall ustemp_step_function_test_5:delimiter_entry1.
  forall ustemp_step_function_test_6:delimiter_entry1.
  forall ustemp_step_function_test_7:delimiter_entry1.
  forall ustemp_step_function_test_8:delimiter_entry1.
  forall ustemp_step_function_test_9:delimiter_entry1
  [step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8, ustemp_step_function_test_9)].
  (forall ustemp_step_function_test_10:int.
  ((not (ustemp_step_function_test_10 = 0)) ->
  ((ustemp_step_function_test_10 = 1) ->
  (access1(ustemp_step_function_test_10,
  to_array9(step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8,
  ustemp_step_function_test_9))) = ustemp_step_function_test_4)))))

axiom def_axiom51 :
  (forall ustemp_step_function_test_3:delimiter_entry1.
  forall ustemp_step_function_test_4:delimiter_entry1.
  forall ustemp_step_function_test_5:delimiter_entry1.
  forall ustemp_step_function_test_6:delimiter_entry1.
  forall ustemp_step_function_test_7:delimiter_entry1.
  forall ustemp_step_function_test_8:delimiter_entry1.
  forall ustemp_step_function_test_9:delimiter_entry1
  [step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8, ustemp_step_function_test_9)].
  (forall ustemp_step_function_test_10:int.
  ((not (ustemp_step_function_test_10 = 0)) ->
  ((not (ustemp_step_function_test_10 = 1)) ->
  ((ustemp_step_function_test_10 = 2) ->
  (access1(ustemp_step_function_test_10,
  to_array9(step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8,
  ustemp_step_function_test_9))) = ustemp_step_function_test_5))))))

axiom def_axiom52 :
  (forall ustemp_step_function_test_3:delimiter_entry1.
  forall ustemp_step_function_test_4:delimiter_entry1.
  forall ustemp_step_function_test_5:delimiter_entry1.
  forall ustemp_step_function_test_6:delimiter_entry1.
  forall ustemp_step_function_test_7:delimiter_entry1.
  forall ustemp_step_function_test_8:delimiter_entry1.
  forall ustemp_step_function_test_9:delimiter_entry1
  [step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8, ustemp_step_function_test_9)].
  (forall ustemp_step_function_test_10:int.
  ((not (ustemp_step_function_test_10 = 0)) ->
  ((not (ustemp_step_function_test_10 = 1)) ->
  ((not (ustemp_step_function_test_10 = 2)) ->
  ((ustemp_step_function_test_10 = 3) ->
  (access1(ustemp_step_function_test_10,
  to_array9(step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8,
  ustemp_step_function_test_9))) = ustemp_step_function_test_6)))))))

axiom def_axiom53 :
  (forall ustemp_step_function_test_3:delimiter_entry1.
  forall ustemp_step_function_test_4:delimiter_entry1.
  forall ustemp_step_function_test_5:delimiter_entry1.
  forall ustemp_step_function_test_6:delimiter_entry1.
  forall ustemp_step_function_test_7:delimiter_entry1.
  forall ustemp_step_function_test_8:delimiter_entry1.
  forall ustemp_step_function_test_9:delimiter_entry1
  [step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8, ustemp_step_function_test_9)].
  (forall ustemp_step_function_test_10:int.
  ((not (ustemp_step_function_test_10 = 0)) ->
  ((not (ustemp_step_function_test_10 = 1)) ->
  ((not (ustemp_step_function_test_10 = 2)) ->
  ((not (ustemp_step_function_test_10 = 3)) ->
  ((ustemp_step_function_test_10 = 4) ->
  (access1(ustemp_step_function_test_10,
  to_array9(step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8,
  ustemp_step_function_test_9))) = ustemp_step_function_test_7))))))))

axiom def_axiom54 :
  (forall ustemp_step_function_test_3:delimiter_entry1.
  forall ustemp_step_function_test_4:delimiter_entry1.
  forall ustemp_step_function_test_5:delimiter_entry1.
  forall ustemp_step_function_test_6:delimiter_entry1.
  forall ustemp_step_function_test_7:delimiter_entry1.
  forall ustemp_step_function_test_8:delimiter_entry1.
  forall ustemp_step_function_test_9:delimiter_entry1
  [step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8, ustemp_step_function_test_9)].
  (forall ustemp_step_function_test_10:int.
  ((not (ustemp_step_function_test_10 = 0)) ->
  ((not (ustemp_step_function_test_10 = 1)) ->
  ((not (ustemp_step_function_test_10 = 2)) ->
  ((not (ustemp_step_function_test_10 = 3)) ->
  ((not (ustemp_step_function_test_10 = 4)) ->
  ((ustemp_step_function_test_10 = 5) ->
  (access1(ustemp_step_function_test_10,
  to_array9(step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8,
  ustemp_step_function_test_9))) = ustemp_step_function_test_8)))))))))

axiom def_axiom55 :
  (forall ustemp_step_function_test_3:delimiter_entry1.
  forall ustemp_step_function_test_4:delimiter_entry1.
  forall ustemp_step_function_test_5:delimiter_entry1.
  forall ustemp_step_function_test_6:delimiter_entry1.
  forall ustemp_step_function_test_7:delimiter_entry1.
  forall ustemp_step_function_test_8:delimiter_entry1.
  forall ustemp_step_function_test_9:delimiter_entry1
  [step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8, ustemp_step_function_test_9)].
  (forall ustemp_step_function_test_10:int.
  ((not (ustemp_step_function_test_10 = 0)) ->
  ((not (ustemp_step_function_test_10 = 1)) ->
  ((not (ustemp_step_function_test_10 = 2)) ->
  ((not (ustemp_step_function_test_10 = 3)) ->
  ((not (ustemp_step_function_test_10 = 4)) ->
  ((not (ustemp_step_function_test_10 = 5)) ->
  (access1(ustemp_step_function_test_10,
  to_array9(step_function_test__31__151(ustemp_step_function_test_3,
  ustemp_step_function_test_4, ustemp_step_function_test_5,
  ustemp_step_function_test_6, ustemp_step_function_test_7,
  ustemp_step_function_test_8,
  ustemp_step_function_test_9))) = ustemp_step_function_test_9)))))))))

type t7

goal WP_parameter_def :
  (forall sfun1:num_delimiters_range1. forall sfun11:delimiter_entry1 map1.
  forall sfun12:int. (((sfun1 = of_int8(2)) and
  ((sfun11 = (step_function_test__7__151({ rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(3.0) }, { rec__delimiter1 = of_int6(3);
  rec__value1 = of_real1(2.0) }, { rec__delimiter1 = of_int6(5);
  rec__value1 = of_real1(5.0) }, { rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(0.0e-1) })).elts7) and
  (sfun12 = (step_function_test__7__151({ rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(3.0) }, { rec__delimiter1 = of_int6(3);
  rec__value1 = of_real1(2.0) }, { rec__delimiter1 = of_int6(5);
  rec__value1 = of_real1(5.0) }, { rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(0.0e-1) })).offset7))) ->
  (forall sfun2:num_delimiters_range1. forall sfun21:delimiter_entry1 map1.
  forall sfun22:int. (((sfun2 = of_int8(2)) and
  ((sfun21 = (step_function_test__14__151({ rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(1.0) }, { rec__delimiter1 = of_int6(3);
  rec__value1 = of_real1(1.0) }, { rec__delimiter1 = of_int6(5);
  rec__value1 = of_real1(3.0) }, { rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(0.0e-1) })).elts9) and
  (sfun22 = (step_function_test__14__151({ rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(1.0) }, { rec__delimiter1 = of_int6(3);
  rec__value1 = of_real1(1.0) }, { rec__delimiter1 = of_int6(5);
  rec__value1 = of_real1(3.0) }, { rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(0.0e-1) })).offset9))) ->
  (forall sfun3:num_delimiters_range1. forall sfun31:delimiter_entry1 map1.
  forall sfun32:int. (((sfun3 = of_int8(5)) and
  ((sfun31 = (step_function_test__21__151({ rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(1.0) }, { rec__delimiter1 = of_int6(1);
  rec__value1 = of_real1(1.0) }, { rec__delimiter1 = of_int6(3);
  rec__value1 = of_real1(3.0) }, { rec__delimiter1 = of_int6(5);
  rec__value1 = of_real1(5.0) }, { rec__delimiter1 = of_int6(7);
  rec__value1 = of_real1(7.0) }, { rec__delimiter1 = of_int6(9);
  rec__value1 = of_real1(9.0) }, { rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(0.0e-1) })).elts10) and
  (sfun32 = (step_function_test__21__151({ rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(1.0) }, { rec__delimiter1 = of_int6(1);
  rec__value1 = of_real1(1.0) }, { rec__delimiter1 = of_int6(3);
  rec__value1 = of_real1(3.0) }, { rec__delimiter1 = of_int6(5);
  rec__value1 = of_real1(5.0) }, { rec__delimiter1 = of_int6(7);
  rec__value1 = of_real1(7.0) }, { rec__delimiter1 = of_int6(9);
  rec__value1 = of_real1(9.0) }, { rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(0.0e-1) })).offset10))) ->
  (forall sfun4:num_delimiters_range1. forall sfun41:delimiter_entry1 map1.
  forall sfun42:int. (((sfun4 = of_int8(5)) and
  ((sfun41 = (step_function_test__31__151({ rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(10.0) }, { rec__delimiter1 = of_int6(2);
  rec__value1 = of_real1(8.0) }, { rec__delimiter1 = of_int6(4);
  rec__value1 = of_real1(6.0) }, { rec__delimiter1 = of_int6(6);
  rec__value1 = of_real1(4.0) }, { rec__delimiter1 = of_int6(8);
  rec__value1 = of_real1(2.0) }, { rec__delimiter1 = of_int6(10);
  rec__value1 = of_real1(0.500000000000000000000000) }, { rec__delimiter1 =
  of_int6(0); rec__value1 = of_real1(0.0e-1) })).elts11) and
  (sfun42 = (step_function_test__31__151({ rec__delimiter1 = of_int6(0);
  rec__value1 = of_real1(10.0) }, { rec__delimiter1 = of_int6(2);
  rec__value1 = of_real1(8.0) }, { rec__delimiter1 = of_int6(4);
  rec__value1 = of_real1(6.0) }, { rec__delimiter1 = of_int6(6);
  rec__value1 = of_real1(4.0) }, { rec__delimiter1 = of_int6(8);
  rec__value1 = of_real1(2.0) }, { rec__delimiter1 = of_int6(10);
  rec__value1 = of_real1(0.500000000000000000000000) }, { rec__delimiter1 =
  of_int6(0); rec__value1 = of_real1(0.0e-1) })).offset11))) -> (is_valid1({
  rec__number_of_delimiters1 = sfun1; rec__step1 = { elts8 = sfun11;
  offset8 = sfun12 } }) = true)))))))))

